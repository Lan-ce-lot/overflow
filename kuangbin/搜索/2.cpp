#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <cmath>
#define mem(a,b) memset(a,b,sizeof(a));
using namespace std;
#define INF 0x3f3f3f3f
typedef long long ll;
int dir[4][2] = {0,1,0,-1,1,0,-1,0};
const int maxn = 100005;
int n,m,a[10005],vis[10005];//a数组标记是否为素数,vis数组标记是否入过队列
struct node
{
    int x,y;//x存当前的数,y存　到这个数的花费
    node(int xx,int yy):x(xx),y(yy) {};
};
queue<node>q;
void judge()//预处理1000-9999间的素数
{
    int i,k;
    for(int j = 1000; j <= 9999; j++)
    {
        k = sqrt(j);
        for(i = 2; i <= k; i++)
        {
            if(j % i == 0)
                break;

        }
        if(i == k+1)
            a[j] = 1;
    }


}
void bfs(int p)
{
    q.push(node(p,0));
    while(!q.empty())
    {
        node k = q.front();
        q.pop();
        if(k.x == m)
        {
            cout << k.y << endl;
            break;
        }
        int k1 = k.x/1000%10, k2 = k.x/100%10, k3 = k.x/10%10, k4 = k.x%10;//k1,k2,k3,k4分别存千位，百位，十位，个位
        int temp;
        //每一次只能改变一位
        for(int i = 1; i <= 9; i++)//改变千位上的数，不能为０
        {
            if(i == k1) continue;
            int kk1 = i;
            temp = kk1*1000+k2*100+k3*10+k4;
            if(a[temp] == 1&&!vis[temp])//判断该数是否为素数以及是否重复入队
            {
                cout << temp << ' ' << k.y+1 << endl;
                vis[temp] = 1;
                q.push(node(temp,k.y+1));
            }
        }
        for(int i = 0; i <= 9; i++)//改变百位上的数
        {
            if(i == k2) continue;
            int kk2 = i;
            temp = k1*1000+kk2*100+k3*10+k4;
            if(a[temp] == 1&&!vis[temp])
            {
                cout << temp << ' ' << k.y+1 << endl;
                vis[temp] = 1;
                q.push(node(temp,k.y+1));
            }
        }
        for(int i = 0; i <= 9; i++)//改变十位上的数
        {
            if(i == k3) continue;
            int kk3 = i;
            temp = k1*1000+k2*100+kk3*10+k4;
            if(a[temp] == 1&&!vis[temp])
            {
                cout << temp << ' ' << k.y+1 << endl;
                vis[temp] = 1;
                q.push(node(temp,k.y+1));
            }
        }
        for(int i = 0; i <= 9; i++)//改变个位上的数
        {
            if(i == k4) continue;
            int kk4 = i;
            temp = k1*1000+k2*100+k3*10+kk4;
            if(a[temp] == 1&&!vis[temp])
            {
                cout << temp << ' ' << k.y+1 << endl;
                vis[temp] = 1;
                q.push(node(temp,k.y+1));
            }
        }
    }
}
int main()
{
    int t;
    cin >> t;
    judge();//预处理
    while(t--)
    {
        mem(vis,0);
        while(!q.empty())
            q.pop();//每次使用的时候都清空一次，防止上次使用队列没有清空
        cin >> n >> m;
        bfs(n);
    }
    return 0;
}
/*
3
1373 8017
3373 1
4373 1
6373 1
1873 1
1973 1
1303 1
1373 2
3673 2
3313 2
3323 2
3343 2
3371 2
4073 2
4273 2
4673 2
4973 2
4363 2
6073 2
6173 2
6473 2
6673 2
6323 2
6343 2
6353 2
6379 2
7873 2
1823 2
1871 2
1877 2
1879 2
9973 2
1913 2
1933 2
1993 2
1979 2
5303 2
1103 2
1301 2
1307 2
7673 3
3613 3
3623 3
3643 3
3671 3
3677 3
3413 3
3319 3
5323 3
9323 3
3023 3
3823 3
3923 3
3329 3
9343 3
3943 3
3347 3
2371 3
9371 3
3271 3
3571 3
3301 3
3331 3
3361 3
3391 3
4003 3
4013 3
4093 3
4079 3
2273 3
5273 3
8273 3
4243 3
4253 3
4283 3
4271 3
4603 3
4643 3
4663 3
4679 3
4903 3
4933 3
4943 3
4993 3
8363 3
4463 3
6043 3
6053 3
6079 3
9173 3
6113 3
6133 3
6143 3
6163 3
2473 3
9473 3
6653 3
6679 3
6823 3
6329 3
8353 3
6553 3
6359 3
6779 3
6389 3
7573 3
7823 3
7853 3
7883 3
7877 3
7879 3
1123 3
1223 3
1423 3
1523 3
1723 3
4871 3
6871 3
9871 3
1171 3
1471 3
1571 3
1801 3
1811 3
1831 3
1861 3
3877 3
4877 3
1277 3
1777 3
1847 3
1867 3
2879 3
5879 3
1279 3
1579 3
1889 3
9923 3
1013 3
1213 3
1613 3
7933 3
8933 3
1033 3
1433 3
1733 3
1931 3
7993 3
1093 3
1193 3
1493 3
1693 3
1997 3
1999 3
1949 3
5003 3
5503 3
5903 3
5333 3
5393 3
5309 3
7103 3
9103 3
1153 3
1163 3
1109 3
6301 3
1201 3
1601 3
1901 3
1321 3
1361 3
1381 3
3307 3
7307 3
1607 3
1907 3
1327 3
1367 3
7603 4
7643 4
9613 4
3617 4
5623 4
8623 4
9623 4
9643 4
2671 4
3631 4
3691 4
2677 4
8677 4
9677 4
3607 4
3637 4
3697 4
5413 4
9413 4
3433 4
3463 4
1319 4
9319 4
3019 4
3119 4
3719 4
3919 4
3359 4
3389 4
5023 4
5923 4
3083 4
3803 4
3833 4
3853 4
3863 4
3821 4
8923 4
3929 4
8329 4
3229 4
3529 4
9043 4
9743 4
9341 4
9349 4
3947 4
2347 4
5347 4
3547 4
3847 4
2971 4
2311 4
2341 4
2351 4
2381 4
2377 4
9311 4
9391 4
9377 4
6271 4
3221 4
3251 4
6571 4
3511 4
3541 4
3581 4
3001 4
3701 4
7331 4
3931 4
6361 4
3061 4
3461 4
3761 4
4391 4
3191 4
3491 4
2003 4
4703 4
4001 4
4007 4
7013 4
9013 4
4513 4
4813 4
4019 4
8093 4
4493 4
4793 4
4091 4
4099 4
3079 4
7079 4
4049 4
2203 4
2213 4
2243 4
2293 4
5573 4
5233 4
5279 4
8573 4
8233 4
8243 4
8263 4
8293 4
7243 4
4241 4
3253 4
7253 4
4153 4
4259 4
1283 4
7283 4
9283 4
4483 4
4583 4
4783 4
4289 4
4201 4
4211 4
4231 4
4261 4
4649 4
1663 4
2663 4
8663 4
9679 4
4639 4
2903 4
4909 4
4133 4
4733 4
4931 4
4937 4
4999 4
8563 4
8863 4
8963 4
8369 4
9463 4
4423 4
7043 4
6047 4
2053 4
8053 4
6029 4
6089 4
9133 4
2113 4
5113 4
6733 4
6833 4
6131 4
2143 4
3163 4
6263 4
6563 4
6763 4
6863 4
2423 4
2477 4
9403 4
9433 4
9479 4
5653 4
6659 4
6619 4
6689 4
6803 4
6883 4
6827 4
6829 4
6229 4
6529 4
8753 4
1553 4
6551 4
6959 4
3779 4
5779 4
8779 4
6709 4
6719 4
2389 4
8389 4
7523 4
7583 4
7577 4
7723 4
7829 4
7753 4
9883 4
7177 4
7477 4
7817 4
7867 4
8123 4
1129 4
1229 4
8423 4
1453 4
1483 4
1427 4
1429 4
4523 4
1543 4
1583 4
4723 4
1753 4
1783 4
1721 4
4801 4
4831 4
4861 4
6971 4
6841 4
9811 4
9851 4
5171 4
8171 4
1151 4
1181 4
5471 4
1451 4
1481 4
1511 4
1531 4
2801 4
5801 4
8831 4
1031 4
1231 4
2861 4
5861 4
8861 4
1061 4
4177 4
4817 4
6277 4
9277 4
1217 4
1237 4
1297 4
2777 4
1747 4
1787 4
1447 4
5867 4
8867 4
1567 4
1667 4
2179 4
2579 4
2819 4
5179 4
5479 4
5839 4
5849 4
5869 4
1249 4
1259 4
1289 4
1549 4
1559 4
3889 4
4889 4
1489 4
1789 4
9929 4
1063 4
1019 4
7213 4
1619 4
7333 4
7433 4
7963 4
7937 4
1039 4
1439 4
3733 4
9733 4
9931 4
1951 4
7193 4
7393 4
7793 4
1091 4
1097 4
1499 4
2693 4
5693 4
8693 4
1697 4
1699 4
6997 4
1597 4
1987 4
2999 4
8999 4
1399 4
6949 4
7949 4
9949 4
1049 4
5009 4
2503 4
5563 4
5501 4
5507 4
5953 4
2333 4
2393 4
5399 4
2309 4
7309 4
5209 4
7703 4
7109 4
9203 4
9803 4
9109 4
2153 4
5153 4
3109 4
1009 4
1409 4
1609 4
1709 4
6101 4
6701 4
6311 4
1291 4
9601 4
1621 4
7901 4
9901 4
7321 4
1021 4
5381 4
3407 4
3907 4
7207 4
7507 4
7607 4
7907 4
6607 4
1627 4
1637 4
1657 4
6907 4
9907 4
4327 4
6367 4
7649 5
9619 5
2617 5
3217 5
3517 5
3917 5
5683 5
8627 5
8629 5
9629 5
9649 5
2621 5
9631 5
4691 5
6691 5
7691 5
2647 5
2657 5
2687 5
8377 5
8647 5
9697 5
4637 5
6637 5
3037 5
3137 5
3797 5
5813 5
5443 5
5483 5
5417 5
5419 5
9419 5
3533 5
3467 5
3469 5
9719 5
7019 5
3049 5
3089 5
3011 5
5119 5
3169 5
2719 5
8719 5
3709 5
3739 5
3769 5
4919 5
7919 5
3989 5
3911 5
3259 5
3559 5
3659 5
5021 5
5927 5
2083 5
3583 5
2803 5
8803 5
3203 5
2833 5
9833 5
3851 5
5821 5
8821 5
3121 5
3881 5
8929 5
8429 5
4229 5
7229 5
3209 5
3299 5
7529 5
3539 5
3527 5
9041 5
9049 5
5743 5
9749 5
9241 5
9941 5
4349 5
7349 5
6947 5
3967 5
2447 5
2357 5
5147 5
5647 5
5387 5
4547 5
6547 5
7547 5
9547 5
3557 5
8971 5
8311 5
2011 5
2111 5
2411 5
2711 5
2141 5
2441 5
2741 5
5351 5
7351 5
2251 5
2551 5
2851 5
2081 5
2281 5
2383 5
9011 5
9511 5
9091 5
9491 5
9791 5
9397 5
9337 5
6211 5
6221 5
2221 5
8221 5
9221 5
3257 5
6521 5
6581 5
6577 5
7541 5
3041 5
5581 5
8581 5
3181 5
7001 5
9001 5
5701 5
6661 5
6761 5
6961 5
3067 5
8461 5
9461 5
8761 5
3767 5
4591 5
4397 5
8191 5
6491 5
3499 5
2063 5
6703 5
4021 5
4051 5
6007 5
9007 5
4507 5
4027 5
4057 5
8513 5
4517 5
4519 5
4219 5
8893 5
3793 5
6793 5
4799 5
6091 5
2099 5
5099 5
7039 5
7069 5
4549 5
6203 5
2207 5
2713 5
2543 5
2843 5
9293 5
2593 5
2297 5
5231 5
5237 5
8543 5
8231 5
8237 5
8443 5
8269 5
8291 5
8297 5
7247 5
4441 5
4157 5
4159 5
4759 5
9281 5
4481 5
5783 5
8783 5
4787 5
4789 5
7211 5
4111 5
4217 5
5261 5
4561 5
1669 5
2963 5
2633 5
2683 5
8669 5
9689 5
5639 5
7639 5
4139 5
4339 5
2953 5
2909 5
4409 5
4969 5
4951 5
4337 5
4957 5
4967 5
4987 5
8969 5
7369 5
8069 5
9467 5
4421 5
6247 5
6037 5
6067 5
2753 5
8059 5
2029 5
9029 5
2089 5
8089 5
9533 5
9137 5
6737 5
2131 5
6121 5
6151 5
3167 5
6269 5
6569 5
6869 5
5477 5
2417 5
2437 5
2467 5
9431 5
9437 5
9439 5
5651 5
5657 5
5659 5
2659 5
2689 5
5689 5
8689 5
6983 5
5827 5
6427 5
6857 5
9829 5
6899 5
6299 5
6599 5
8713 5
9551 5
6451 5
5749 5
8179 5
2789 5
2339 5
2399 5
8387 5
7589 5
7517 5
7537 5
7727 5
7129 5
7757 5
7759 5
9887 5
7127 5
7187 5
7417 5
7457 5
7487 5
9817 5
7717 5
2129 5
4129 5
1459 5
1487 5
4721 5
4729 5
1759 5
9721 5
1741 5
6911 5
6991 5
6977 5
7841 5
5851 5
9151 5
9857 5
9859 5
5101 5
8101 5
8111 5
8161 5
7151 5
1051 5
9181 5
1187 5
5431 5
5441 5
4451 5
7451 5
6481 5
7481 5
2531 5
5531 5
5881 5
5807 5
8431 5
8731 5
8837 5
8839 5
2161 5
1069 5
4127 5
6217 5
6257 5
6287 5
9227 5
9257 5
1117 5
2237 5
7237 5
4297 5
5297 5
7297 5
2707 5
2767 5
2797 5
8747 5
9787 5
1087 5
4447 5
8447 5
5167 5
5857 5
5897 5
8167 5
8467 5
8807 5
8887 5
4567 5
2539 5
2549 5
8819 5
5189 5
5449 5
9839 5
5039 5
5939 5
8849 5
5843 5
5569 5
5669 5
7549 5
7559 5
7489 5
7789 5
7219 5
7927 5
2039 5
8039 5
9739 5
7951 5
8951 5
7499 5
2699 5
8699 5
7699 5
6197 5
6397 5
6917 5
6967 5
4597 5
8597 5
5987 5
2939 5
2969 5
8599 5
6449 5
8009 5
5059 5
8501 5
5521 5
5591 5
5107 5
5407 5
5527 5
5557 5
2609 5
8209 5
9209 5
7159 5
9199 5
8609 5
6781 5
6791 5
6011 5
6317 5
9661 5
4621 5
7621 5
7121 5
5081 5
5281 5
5981 5
3457 5
7687 5
4657 5
9967 5
4357 5
6337 5
7669 6
2017 6
2917 6
8527 6
2521 6
4651 6
7591 6
7681 6
2557 6
2857 6
2957 6
2087 6
2287 6
2887 6
8317 6
8147 6
8641 6
9497 6
2137 6
3187 6
3727 6
5717 6
5437 6
8419 6
5519 6
3593 6
6469 6
3449 6
9769 6
5011 6
8011 6
2729 6
2749 6
8219 6
5051 6
2927 6
5227 6
2837 6
8521 6
8539 6
9539 6
9059 6
5741 6
8941 6
5197 6
5641 6
5087 6
9587 6
7411 6
5711 6
2731 6
2791 6
7741 6
8741 6
2591 6
8081 6
9521 6
9421 6
5791 6
9781 6
6421 6
7561 6
8681 6
9067 6
9161 6
9767 6
2069 6
4751 6
2027 6
7027 6
7057 6
4457 6
2267 6
2897 6
5737 6
8537 6
8737 6
8287 6
2269 6
9157 6
8087 6
9127 6
9187 6
5077 6
9239 6
2459 6
6199 6
2239 6
7459 6
8117 6
8707 6
8017 7
7

*/
